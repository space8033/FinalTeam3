<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalteam3.exodia.note.dao.NoteDao">
	<insert id="insertNote" parameterType="Note">
		<selectKey keyProperty="note_no" resultType="int" order="BEFORE">
			select SEQ_NOTE.nextval from dual
		</selectKey>
		insert into NOTE(
            NOTE_NO, NOTE_TITLE, NOTE_CONTENT, NOTE_SENDER, NOTE_CREATEDAT, NOTE_RESTIME, NOTE_LABEL, NOTE_DRAFT
	    )
	    values(
	        #{note_no}, #{note_title}, #{note_content}, #{note_sender}, to_char(sysdate,'yyyy.mm.dd hh24:mi:ss'), #{note_restime}, #{note_label}, #{note_draft}
	    )
	</insert>
	
	<!-- 작성자: 김시온 -->
	<insert id="insertNoteRead" parameterType="NoteRead">
		<selectKey keyProperty="noteRead_no" resultType="int" order="BEFORE">
			select SEQ_NOTEREAD.nextval as noteRead_no from dual
		</selectKey>
		 insert into NOTEREAD(NOTEREAD_NO, NOTE_NO, EMP_NO_RECEIVER, NOTEREAD_TYPE)
  	     values(#{noteRead_no}, #{note_no}, #{emp_no_receiver}, #{noteRead_type})
	</insert> 
	
	<!-- 수신 쪽지 목록  -->
	<select id="selectNoteByEmpNo" resultType="NoteAll" parameterType="Map">
		<![CDATA[
	       select rnum, note_no, note_title, note_content, note_sender, note_draft, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			 from (
			    select rownum as rnum, note_no, note_title, note_content, note_sender, note_draft, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			    from(
			        select n.note_no, note_title, note_content, note_sender, note_draft, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			          from note n, noteRead nr
			         where emp_no_receiver = #{empNo} 
			           and n.note_no = nr.note_no 
			           and note_draft IS NULL
			           and noteRead_deletedAt IS NULL
			           and noteRead_realDeletedAt IS NULL
			           and note_draft IS NULL
			           and noteRead_isCanceled IS NULL
			      order by note_createdAt desc
			    )
			    where rownum <= #{endRowNo}
			 )
			 where rnum >= #{startRowNo}
		]]>
	</select>
	
	<!-- 발신 쪽지 목록 -->
	<select id="selectSentNoteByEmpNo" resultType="NoteAll" parameterType="Map">
		<![CDATA[
	       select rnum, note_no, note_title, note_content, note_sender, note_createdAt, note_label
			 from (
			    select rownum as rnum, note_no, note_title, note_content, note_sender, note_createdAt, note_label
			    from(
			        select n.note_no, note_title, note_content, note_sender, note_createdAt, note_label
			          from note n
			         where note_sender = #{empNo}
			           and note_draft IS NULL
			      order by note_createdAt desc
			    )
			    where rownum <= #{endRowNo}
			 )
			 where rnum >= #{startRowNo}
		]]>
	</select>
	
	<!-- 중요 쪽지 목록 -->
	<select id="selectStarredNoteByEmpNo" resultType="NoteAll" parameterType="Map">
		<![CDATA[
	       select rnum, note_no, note_title, note_content, note_sender, note_draft, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			 from (
			    select rownum as rnum, note_no, note_title, note_content, note_sender, note_draft, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			    from(
			        select n.note_no, note_title, note_content, note_sender, note_draft, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			          from note n, noteRead nr
			         where emp_no_receiver = #{empNo} 
			           and noteRead_starred = 'starred' 
			           and n.note_no = nr.note_no  
			           and note_draft IS NULL
			           and noteRead_deletedAt IS NULL
			           and noteRead_realDeletedAt IS NULL
			           and noteRead_isCanceled IS NULL
			      order by note_createdAt desc
			    )
			    where rownum <= #{endRowNo}
			 )
			 where rnum >= #{startRowNo}
		]]>
	</select>
	
	<!-- 휴지통 쪽지 목록 -->
	<select id="selectTrashNoteByEmpNo" resultType="NoteAll" parameterType="Map">
		<![CDATA[
	       select rnum, note_no, note_title, note_content, note_draft, note_sender, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			 from (
			    select rownum as rnum, note_no, note_title, note_content, note_draft, note_sender, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			    from(
			        select n.note_no, note_title, note_content, note_draft, note_sender, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			          from note n, noteRead nr
			         where emp_no_receiver = #{empNo} 
			           and noteRead_deletedAt IS NOT NULL 
			           and n.note_no = nr.note_no
			           and noteRead_realDeletedAt IS NULL
			      order by note_createdAt desc
			    )
			    where rownum <= #{endRowNo}
			 )
			 where rnum >= #{startRowNo}
		]]>
	</select>
	
	<!-- 임시저장 쪽지 목록 -->
	<select id="selectDraftNoteByEmpNo" resultType="NoteAll" parameterType="Map">
		<![CDATA[
	       select rnum, note_no, note_title, note_content, note_draft, note_sender, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			 from (
			    select rownum as rnum, note_no, note_title, note_content, note_draft, note_sender, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			    from(
			        select n.note_no, note_title, note_content, note_draft, note_sender, noteRead_isCanceled, note_createdAt, note_label, noteRead_no, emp_no_receiver, noteRead_read, noteRead_type, noteRead_starred
			          from note n, noteRead nr
			         where note_sender = #{empNo}
			           and note_draft IS NOT NULL
			           and n.note_no = nr.note_no
			           and noteRead_deletedAt IS NULL
			           and noteRead_realDeletedAt IS NULL
			      order by note_createdAt desc
			    )
			    where rownum <= #{endRowNo}
			 )
			 where rnum >= #{startRowNo}
		]]>
	</select>
	
	<!-- 수신 쪽지 갯수 가져오기 -->
	<select id="countByEmpno" parameterType="int" resultType="int">
		select count(*)
  		  from note n, noteRead nr
  	     where emp_no_receiver = #{emp_no_receiver}
  	       and note_draft IS NULL 
  	       and n.note_no = nr.note_no 
  	       and noteRead_deletedAt IS NULL 
  	       and noteRead_realDeletedAt IS NULL
  	       and note_draft IS NULL
  	       and noteRead_isCanceled IS NULL
	</select>

	<!-- 안읽은 수신 쪽지 갯수 가져오기 -->
	<select id="countByUnreadInbox" parameterType="int" resultType="int">
		select count(*)
  		  from note n, noteRead nr
  	     where emp_no_receiver = #{emp_no_receiver}
  	       and note_draft IS NULL 
  	       and n.note_no = nr.note_no 
  	       and noteRead_deletedAt IS NULL 
  	       and noteRead_realDeletedAt IS NULL 
  	       and noteRead_read IS NULL
  	       and note_draft IS NULL
  	       and noteRead_isCanceled IS NULL
	</select>
	
	<!-- 발신 쪽지 갯수 가져오기 -->
	<select id="countBySentEmpno" parameterType="int" resultType="int">
		select count(*)
  		  from note n
  	     where note_sender = #{note_sender} 
  	       and note_draft IS NULL 
	</select>
	
	<!-- 임시저장 쪽지 갯수 가져오기 -->
	<select id="countByDraftEmpno" parameterType="int" resultType="int">
		select count(*)
  		  from note n, noteRead nr
  		 where note_sender = #{note_sender} 
  		   and note_draft IS NOT NULL 
  		   and noteRead_deletedAt IS NULL 
  		   and n.note_no = nr.note_no 
  		   and noteRead_realDeletedAt IS NULL 
	</select>

	<!-- 중요 쪽지 갯수 가져오기 -->
	<select id="countByStarredEmpno" parameterType="int" resultType="int">
		select count(*)
  		  from note n, noteRead nr
  		 where emp_no_receiver = #{emp_no_receiver} 
  		   and noteRead_starred = 'starred'
  		   and note_draft IS NULL 
  		   and n.note_no = nr.note_no 
  		   and noteRead_deletedAt IS NULL 
  		   and noteRead_realDeletedAt IS NULL
  		   and noteRead_isCanceled IS NULL
	</select>
	
	<!-- 휴지통 쪽지 갯수 가져오기 -->
	<select id="countByTrashEmpno" parameterType="int" resultType="int">
		select count(*)
  		  from note n, noteRead nr
  		 where emp_no_receiver = #{emp_no_receiver} 
  		   and noteRead_deletedAt IS NOT NULL 
  		   and n.note_no = nr.note_no
  		   and noteRead_realDeletedAt IS NULL 
	</select>
	
	<!-- 쪽지 번호로 noteRead 얻어오기 작성자: 김시온 -->
	<select id="selectNoteRead" parameterType="int" resultType="noteRead">
		select noteRead_read, note_no, noteRead_starred
  		  from noteRead
  		 where noteRead_no = #{noteRead_no}
	</select>
	
	<!-- 쪽지 번호로 note 얻어오기 작성자: 김시온 -->
	<select id="selectNoteByNoteNo" parameterType="int" resultType="note">
		select note_no, note_title, note_content, note_sender, note_createdAt, note_label, note_restime, note_draft
  		  from note
  	 	 where note_no = #{note_no}
	</select>
	
	<!-- 쪽지 번호로 noteRead 읽음 업데이트 작성자: 김시온 -->
	<update id="updateNoteRead" parameterType="int">
		update noteRead 
		   set noteRead_read=to_char(sysdate,'yyyy.mm.dd hh24:mi:ss')
  		 where noteRead_no = #{noteRead_no}
	</update>
	<!-- 쪽지 번호로 noteRead 중요쪽지 업데이트 작성자: 김시온 -->
	<update id="updateNoteStarred" parameterType="noteRead">
		update noteRead 
		   set noteRead_starred = #{noteRead_starred} 
		 where noteRead_no = #{noteRead_no}
	</update>
	
	<!-- 쪽지 번호로 noteRead 쪽지 삭제(휴지통) 업데이트 작성자: 김시온 -->
	<update id="trashNote" parameterType="int">
		update noteRead 
		   set noteRead_deletedAt=to_char(sysdate,'yyyy.mm.dd hh24:mi:ss')
  		 where noteRead_no = #{noteRead_no}
	</update>
	
	<!-- 쪽지 번호로 noteRead 휴지통 비우기 업데이트 작성자: 김시온 -->
	<update id="deleteTrashNote" parameterType="int">
		update noteRead
		   set noteRead_realDeletedAt=to_char(sysdate,'yyyy.mm.dd hh24:mi:ss')
  		 where noteRead_no = #{noteRead_no}
	</update>
	
	<!-- 쪽지 번호로 noteRead 복구 쪽지 업데이트 작성자: 김시온 -->
	<update id="recoveryNotebyNoteRead" parameterType="noteRead">
		update noteRead 
		   set noteRead_deletedAt= #{noteRead_deletedAt} 
  		 where noteRead_no = #{noteRead_no}
	</update>
	
	<!-- 쪽지 번호로 noteRead 발송 취소 쪽지 업데이트 작성자: 김시온 -->
	<update id="sentCancelNote" parameterType="noteRead">
		update noteRead 
		   set noteRead_isCanceled = 1
  		 where noteRead_no = #{noteRead_no}
	</update>
	
	<!-- noteRead 번호로 noteRead 얻어오기 작성자: 김시온 -->
	<select id="selectNoteReadByNoteReadNo" parameterType="int" resultType="noteRead">
		select emp_no_receiver, noteRead_starred, noteRead_isCanceled
  		  from noteRead
  	 	 where noteRead_no = #{noteRead_no}
	</select>
	
	<!-- note 번호로 수신자 정보 얻어오기 작성자: 김시온 -->
	<select id="selectNoteReadByNoteNo" parameterType="int" resultType="noteRead">
		select emp_no_receiver, noteRead_type, noteRead_read, noteRead_no, noteRead_isCanceled
  		  from noteRead
  	 	 where note_no = #{note_no}
	</select>

	
</mapper>