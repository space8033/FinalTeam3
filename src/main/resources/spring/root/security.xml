<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 보안 필터 체인을 적용하지 않는 요청 경로 : 보안 필터 체인 설정보다 먼저 설정해야함 -->
	<security:http pattern="/resources/**" security="none"/>

	<!-- 보안 필터 체인 설정 -->
	<security:http >
		<!-- 인증 방식 설정: Form 인증 방식 -->			
		<security:form-login
			login-page="/employee/login"
			username-parameter="emp_id"
			password-parameter="emp_password"
			login-processing-url="/login"
			authentication-success-handler-ref="authenticationSuccessHandler"
			authentication-failure-handler-ref="authenticationFailureHandler"
			/>
			
		<security:logout 
			logout-url="/logout"
			logout-success-url="/employee/login"/>
			
		<!-- 사이트간 요청 위조 방지 비활성화 -->
		<!-- logout도 post 방식으로 요청(_csrf의 토큰을 전달해야함) -->
		<security:csrf disabled="true"/>
		
		<!-- 요청 URL 권한 설정 방법1-->
		<!-- 
		<security:intercept-url pattern="/ch17/admin*" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/ch17/manager*" access="hasRole('ROLE_MANAGER')"/> 
		<security:intercept-url pattern="/ch17/user*" access="isAuthenticated()"/>
		-->
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 권한 없음일 경우 보여줄 페이지 설정 -->
		<security:access-denied-handler error-page="/error403"/>
	</security:http>
	
	<!-- 권한 어노테이션 -->
	<security:global-method-security secured-annotations="enabled"/>
	
	<bean id="authenticationSuccessHandler" class="com.finalteam3.exodia.security.handler.AuthenticationSuccessHandler">
		
	</bean>
	<bean id="authenticationFailureHandler" class="com.finalteam3.exodia.security.handler.AuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/employee/loginFailure"></property>
	</bean>
	<bean id="logoutSuccessHandler" class="com.finalteam3.exodia.security.handler.LogoutSuccessHandler">
		<property name="defaultTargetUrl" value="/employee/login"></property>
	</bean>
	
	<!-- DB로부터 사용자 정보를 가져오는 객체 설정 -->
	<bean id="empDetailService" class="com.finalteam3.exodia.security.service.EmpDetailService"></bean>
	
	<!-- 인증 제공자 설정 -->
	<bean id="daoAuthenticationProvider"
		  class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="empDetailService"/>
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
	</bean> 
	
	<!-- 권한 계층 설정 -->
	<bean id="roleHierarchyAuthoritiesMapper"
		  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg ref="roleHierarchyImpl"/>
	</bean>	
	<bean id="roleHierarchyImpl" 
		  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
				ROLE_ADMIN > ROLE_PM
				ROLE_PM > ROLE_PL
				ROLE_PL > ROLE_EMP
			</value>
		</property>
	</bean>	
</beans>
